{"ast":null,"code":"// src/services/api.js - Updated version with all new methods\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// Use environment variable or default to localhost for development\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n      timeout: 60000,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: false,\n      crossdomain: true\n    });\n\n    // Request interceptor\n    this.client.interceptors.request.use(config => {\n      config.headers['Access-Control-Allow-Origin'] = '*';\n      config.headers['Access-Control-Allow-Headers'] = '*';\n      config.headers['Access-Control-Allow-Methods'] = '*';\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor with better error handling\n    this.client.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      var _error$response, _error$response2, _error$response3, _error$response4;\n      if (error.message && error.message.includes('CORS')) {\n        console.error('CORS Error:', error);\n        toast.error('Network connection error. Please check your internet connection.');\n        return Promise.reject(error);\n      }\n      if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {\n        console.error('Network Error:', error);\n        toast.error('Unable to connect to server. Please check your connection.');\n        return Promise.reject(error);\n      }\n      if (error.code === 'ECONNABORTED') {\n        console.error('Timeout Error:', error);\n        toast.error('Request timeout. Please try again.');\n        return Promise.reject(error);\n      }\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('token');\n        this.setAuthToken(null);\n        window.location.href = '/login';\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n        toast.error('Access denied');\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n        toast.error('Server error. Please try again.');\n      } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 0) {\n        console.error('Possible CORS issue - Status 0:', error);\n        toast.error('Connection blocked. Please check CORS settings.');\n      }\n      return Promise.reject(error);\n    });\n  }\n  setAuthToken(token) {\n    if (token) {\n      this.client.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete this.client.defaults.headers.common['Authorization'];\n    }\n  }\n\n  // Generic HTTP methods\n  async get(url, config = {}) {\n    try {\n      return await this.client.get(url, config);\n    } catch (error) {\n      console.error(`GET ${url} failed:`, error);\n      throw error;\n    }\n  }\n  async post(url, data = {}, config = {}) {\n    try {\n      return await this.client.post(url, data, config);\n    } catch (error) {\n      console.error(`POST ${url} failed:`, error);\n      throw error;\n    }\n  }\n  async put(url, data = {}, config = {}) {\n    try {\n      return await this.client.put(url, data, config);\n    } catch (error) {\n      console.error(`PUT ${url} failed:`, error);\n      throw error;\n    }\n  }\n  async delete(url, config = {}) {\n    try {\n      return await this.client.delete(url, config);\n    } catch (error) {\n      console.error(`DELETE ${url} failed:`, error);\n      throw error;\n    }\n  }\n\n  // Health check method\n  async healthCheck() {\n    try {\n      const response = await this.client.get('/health');\n      console.log('Health check successful:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // =====================================\n  // EXISTING PUJA API METHODS\n  // =====================================\n  async generateFocusSuggestion(data) {\n    return this.post('/puja/focus-suggestion', data);\n  }\n  async generateMonthlyPanchang(data) {\n    return this.post('/puja/panchang/monthly', data);\n  }\n  async generatePropositions(data) {\n    return this.post('/puja/propositions/generate', data);\n  }\n  async generateExperimentalPujas(data) {\n    return this.post('/puja/propositions/experimental', data);\n  }\n  async getHistoricalPropositions(params = {}) {\n    return this.get('/puja/propositions/history', {\n      params\n    });\n  }\n  async exportToSheets(data) {\n    return this.post('/puja/export/sheets', data);\n  }\n  async uploadPDFs(formData) {\n    return this.post('/puja/pdfs/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 120000\n    });\n  }\n  async listPDFs() {\n    return this.get('/puja/pdfs/list');\n  }\n  async getPujaStatistics(params = {}) {\n    return this.get('/puja/statistics', {\n      params\n    });\n  }\n  async getPanchangForDate(date, location = 'delhi') {\n    return this.get('/puja/panchang/date', {\n      params: {\n        date,\n        location\n      }\n    });\n  }\n  async saveFocusSuggestion(data) {\n    return this.post('/puja/focus-suggestion/save', data);\n  }\n  async getFocusSuggestionHistory(params = {}) {\n    return this.get('/puja/focus-suggestion/history', {\n      params\n    });\n  }\n  async getSeasonalEvents(month) {\n    return this.get('/puja/seasonal-events', {\n      params: {\n        month\n      }\n    });\n  }\n\n  // =====================================\n  // NEW PROPOSITION MANAGEMENT METHODS\n  // =====================================\n\n  // Search propositions with advanced filters\n  async searchPropositions(params = {}) {\n    return this.get('/puja/propositions/search', {\n      params\n    });\n  }\n\n  // Get propositions by category\n  async getPropositionsByCategory(category, params = {}) {\n    return this.get(`/puja/propositions/category/${category}`, {\n      params\n    });\n  }\n\n  // Update proposition status\n  async updatePropositionStatus(propositionId, data) {\n    return this.put(`/puja/propositions/${propositionId}/status`, data);\n  }\n\n  // Delete proposition\n  async deleteProposition(propositionId) {\n    return this.delete(`/puja/propositions/${propositionId}`);\n  }\n\n  // Clone proposition\n  async cloneProposition(propositionId, data) {\n    return this.post(`/puja/propositions/${propositionId}/clone`, data);\n  }\n\n  // Generate proposition variations\n  async generatePropositionVariations(propositionId, data) {\n    return this.post(`/puja/propositions/${propositionId}/variations`, data);\n  }\n\n  // Bulk update propositions\n  async bulkUpdatePropositions(data) {\n    return this.post('/puja/propositions/bulk-update', data);\n  }\n\n  // =====================================\n  // ADVANCED ANALYSIS METHODS\n  // =====================================\n\n  // Generate Why-Why Analysis\n  async generateWhyWhyAnalysis(data) {\n    return this.post('/puja/analysis/why-why', data);\n  }\n\n  // Analyze Performance\n  async analyzePerformance(data) {\n    return this.post('/puja/analysis/performance', data);\n  }\n\n  // Competitive Analysis\n  async performCompetitiveAnalysis(data) {\n    return this.post('/puja/analysis/competitive', data);\n  }\n\n  // Seasonal Strategy Optimization\n  async optimizeSeasonalStrategy(data) {\n    return this.post('/puja/analysis/seasonal', data);\n  }\n\n  // =====================================\n  // INNOVATION & EXPERIMENTATION METHODS\n  // =====================================\n\n  // Innovation Workshop\n  async conductInnovationWorkshop(data) {\n    return this.post('/puja/experiments/innovation-workshop', data);\n  }\n\n  // A/B Test Design\n  async designABTest(data) {\n    return this.post('/puja/experiments/ab-test-design', data);\n  }\n\n  // Breakthrough Ideas\n  async generateBreakthroughIdeas(data) {\n    return this.post('/puja/experiments/breakthrough-ideas', data);\n  }\n\n  // Rapid Prototype Design\n  async designRapidPrototype(data) {\n    return this.post('/puja/experiments/rapid-prototype', data);\n  }\n\n  // =====================================\n  // TEAM REVIEW METHODS\n  // =====================================\n\n  // Sync feedback from Google Sheets\n  async syncSheetFeedback(data) {\n    return this.post('/team-review/sync-sheet-feedback', data);\n  }\n\n  // Get review status\n  async getReviewStatus(params = {}) {\n    return this.get('/team-review/status', {\n      params\n    });\n  }\n\n  // Submit review\n  async submitReview(propositionId, data) {\n    return this.post(`/team-review/submit/${propositionId}`, data);\n  }\n\n  // Get pending reviews\n  async getPendingReviews(params = {}) {\n    return this.get('/team-review/pending', {\n      params\n    });\n  }\n\n  // Bulk review\n  async bulkReview(data) {\n    return this.post('/team-review/bulk-review', data);\n  }\n\n  // =====================================\n  // PERFORMANCE TRACKING METHODS\n  // =====================================\n\n  // Track performance metrics\n  async trackPerformance(data) {\n    return this.post('/performance/track', data);\n  }\n\n  // Get performance analytics\n  async getPerformanceAnalytics(params = {}) {\n    return this.get('/performance/analytics', {\n      params\n    });\n  }\n\n  // Get ROI analysis\n  async getROIAnalysis(params = {}) {\n    return this.get('/performance/roi-analysis', {\n      params\n    });\n  }\n\n  // Get top performers\n  async getTopPerformers(params = {}) {\n    return this.get('/performance/top-performers', {\n      params\n    });\n  }\n\n  // Track conversion funnel\n  async trackConversionFunnel(data) {\n    return this.post('/performance/track-conversion', data);\n  }\n\n  // =====================================\n  // LEARNING SYSTEM METHODS\n  // =====================================\n\n  // Analyze patterns\n  async analyzePatterns(params = {}) {\n    return this.get('/learning/analyze-patterns', {\n      params\n    });\n  }\n\n  // Get success factors\n  async getSuccessFactors(params = {}) {\n    return this.get('/learning/success-factors', {\n      params\n    });\n  }\n\n  // Generate recommendations\n  async generateRecommendations(data) {\n    return this.post('/learning/generate-recommendations', data);\n  }\n\n  // Track learning outcome\n  async trackLearningOutcome(data) {\n    return this.post('/learning/track-outcome', data);\n  }\n\n  // =====================================\n  // FEEDBACK METHODS\n  // =====================================\n\n  // Submit feedback\n  async submitFeedback(data) {\n    return this.post('/feedback/submit', data);\n  }\n\n  // Get feedback history\n  async getFeedbackHistory(params = {}) {\n    return this.get('/feedback/history', {\n      params\n    });\n  }\n\n  // Synthesize feedback\n  async synthesizeFeedback(data) {\n    return this.post('/feedback/synthesize', data);\n  }\n\n  // Export feedback to sheets\n  async exportFeedbackToSheets(data) {\n    return this.post('/feedback/export/sheets', data);\n  }\n\n  // =====================================\n  // ANALYTICS & DASHBOARD METHODS\n  // =====================================\n\n  // Get dashboard data\n  async getDashboardData(params = {}) {\n    return this.get('/dashboard/data', {\n      params\n    });\n  }\n\n  // Get weekly overview\n  async getWeeklyOverview(params = {}) {\n    return this.get('/dashboard/weekly', {\n      params\n    });\n  }\n\n  // Get user activity\n  async getUserActivity(params = {}) {\n    return this.get('/dashboard/activity', {\n      params\n    });\n  }\n\n  // Get analytics dashboard\n  async getAnalyticsDashboard(params = {}) {\n    return this.get('/analytics/dashboard', {\n      params\n    });\n  }\n\n  // Get performance analytics\n  async getAnalyticsPerformance(params = {}) {\n    return this.get('/analytics/performance', {\n      params\n    });\n  }\n\n  // Get trends\n  async getAnalyticsTrends(params = {}) {\n    return this.get('/analytics/trends', {\n      params\n    });\n  }\n\n  // Get insights\n  async getAnalyticsInsights(params = {}) {\n    return this.get('/analytics/insights', {\n      params\n    });\n  }\n\n  // =====================================\n  // UTILITY METHODS\n  // =====================================\n\n  // Test connection\n  async testConnection() {\n    try {\n      const response = await this.get('/test');\n      console.log('Connection test successful:', response.data);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  // Generic search method for any endpoint\n  async search(endpoint, params = {}) {\n    return this.get(`${endpoint}/search`, {\n      params\n    });\n  }\n\n  // Generic list method for any endpoint\n  async list(endpoint, params = {}) {\n    return this.get(endpoint, {\n      params\n    });\n  }\n\n  // Generic create method\n  async create(endpoint, data) {\n    return this.post(endpoint, data);\n  }\n\n  // Generic update method\n  async update(endpoint, id, data) {\n    return this.put(`${endpoint}/${id}`, data);\n  }\n\n  // Generic delete method\n  async remove(endpoint, id) {\n    return this.delete(`${endpoint}/${id}`);\n  }\n\n  // Batch operations\n  async batchOperation(endpoint, operation, data) {\n    return this.post(`${endpoint}/${operation}`, data);\n  }\n\n  // File upload helper\n  async uploadFile(endpoint, file, additionalData = {}) {\n    const formData = new FormData();\n    formData.append('file', file);\n    Object.keys(additionalData).forEach(key => {\n      formData.append(key, additionalData[key]);\n    });\n    return this.post(endpoint, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 120000\n    });\n  }\n\n  // Export helper\n  async exportData(endpoint, format = 'json', params = {}) {\n    return this.get(`${endpoint}/export`, {\n      params: {\n        ...params,\n        format\n      },\n      responseType: format === 'csv' ? 'blob' : 'json'\n    });\n  }\n\n  // Pagination helper\n  async getPaginated(endpoint, page = 1, limit = 20, params = {}) {\n    const offset = (page - 1) * limit;\n    return this.get(endpoint, {\n      params: {\n        ...params,\n        limit,\n        offset\n      }\n    });\n  }\n\n  // Error handling helper\n  handleApiError(error, customMessage = null) {\n    var _error$response5, _error$response5$data, _error$response6;\n    const message = customMessage || ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message || 'An unexpected error occurred';\n    toast.error(message);\n    console.error('API Error:', error);\n    return {\n      success: false,\n      error: message,\n      status: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status,\n      data: null\n    };\n  }\n\n  // Success response helper\n  handleApiSuccess(response, customMessage = null) {\n    if (customMessage) {\n      toast.success(customMessage);\n    }\n    return {\n      success: true,\n      data: response.data,\n      status: response.status,\n      error: null\n    };\n  }\n}\n\n// Create and export the API instance\nexport const api = new ApiService();\n\n// Test connection on startup in development\nif (process.env.NODE_ENV === 'development') {\n  api.testConnection().then(success => {\n    console.log('API Connection Test:', success ? 'SUCCESS' : 'FAILED');\n  });\n}","map":{"version":3,"names":["axios","toast","BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","client","create","baseURL","timeout","headers","withCredentials","crossdomain","interceptors","request","use","config","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response4","message","includes","console","code","status","localStorage","removeItem","setAuthToken","window","location","href","token","defaults","common","get","url","post","data","put","delete","healthCheck","log","generateFocusSuggestion","generateMonthlyPanchang","generatePropositions","generateExperimentalPujas","getHistoricalPropositions","params","exportToSheets","uploadPDFs","formData","listPDFs","getPujaStatistics","getPanchangForDate","date","saveFocusSuggestion","getFocusSuggestionHistory","getSeasonalEvents","month","searchPropositions","getPropositionsByCategory","category","updatePropositionStatus","propositionId","deleteProposition","cloneProposition","generatePropositionVariations","bulkUpdatePropositions","generateWhyWhyAnalysis","analyzePerformance","performCompetitiveAnalysis","optimizeSeasonalStrategy","conductInnovationWorkshop","designABTest","generateBreakthroughIdeas","designRapidPrototype","syncSheetFeedback","getReviewStatus","submitReview","getPendingReviews","bulkReview","trackPerformance","getPerformanceAnalytics","getROIAnalysis","getTopPerformers","trackConversionFunnel","analyzePatterns","getSuccessFactors","generateRecommendations","trackLearningOutcome","submitFeedback","getFeedbackHistory","synthesizeFeedback","exportFeedbackToSheets","getDashboardData","getWeeklyOverview","getUserActivity","getAnalyticsDashboard","getAnalyticsPerformance","getAnalyticsTrends","getAnalyticsInsights","testConnection","search","endpoint","list","update","id","remove","batchOperation","operation","uploadFile","file","additionalData","FormData","append","Object","keys","forEach","key","exportData","format","responseType","getPaginated","page","limit","offset","handleApiError","customMessage","_error$response5","_error$response5$data","_error$response6","success","handleApiSuccess","api","NODE_ENV","then"],"sources":["/Users/souravdey/Projects/panchang/panchang-fe/src/services/api.js"],"sourcesContent":["// src/services/api.js - Updated version with all new methods\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// Use environment variable or default to localhost for development\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass ApiService {\n  constructor() {\n    this.client = axios.create({\n      baseURL: BASE_URL,\n      timeout: 60000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      withCredentials: false,\n      crossdomain: true,\n    });\n\n    // Request interceptor\n    this.client.interceptors.request.use(\n      (config) => {\n        config.headers['Access-Control-Allow-Origin'] = '*';\n        config.headers['Access-Control-Allow-Headers'] = '*';\n        config.headers['Access-Control-Allow-Methods'] = '*';\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor with better error handling\n    this.client.interceptors.response.use(\n      (response) => {\n        return response;\n      },\n      (error) => {\n        if (error.message && error.message.includes('CORS')) {\n          console.error('CORS Error:', error);\n          toast.error('Network connection error. Please check your internet connection.');\n          return Promise.reject(error);\n        }\n\n        if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {\n          console.error('Network Error:', error);\n          toast.error('Unable to connect to server. Please check your connection.');\n          return Promise.reject(error);\n        }\n\n        if (error.code === 'ECONNABORTED') {\n          console.error('Timeout Error:', error);\n          toast.error('Request timeout. Please try again.');\n          return Promise.reject(error);\n        }\n\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          this.setAuthToken(null);\n          window.location.href = '/login';\n        } else if (error.response?.status === 403) {\n          toast.error('Access denied');\n        } else if (error.response?.status >= 500) {\n          toast.error('Server error. Please try again.');\n        } else if (error.response?.status === 0) {\n          console.error('Possible CORS issue - Status 0:', error);\n          toast.error('Connection blocked. Please check CORS settings.');\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n  }\n\n  setAuthToken(token) {\n    if (token) {\n      this.client.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete this.client.defaults.headers.common['Authorization'];\n    }\n  }\n\n  // Generic HTTP methods\n  async get(url, config = {}) {\n    try {\n      return await this.client.get(url, config);\n    } catch (error) {\n      console.error(`GET ${url} failed:`, error);\n      throw error;\n    }\n  }\n\n  async post(url, data = {}, config = {}) {\n    try {\n      return await this.client.post(url, data, config);\n    } catch (error) {\n      console.error(`POST ${url} failed:`, error);\n      throw error;\n    }\n  }\n\n  async put(url, data = {}, config = {}) {\n    try {\n      return await this.client.put(url, data, config);\n    } catch (error) {\n      console.error(`PUT ${url} failed:`, error);\n      throw error;\n    }\n  }\n\n  async delete(url, config = {}) {\n    try {\n      return await this.client.delete(url, config);\n    } catch (error) {\n      console.error(`DELETE ${url} failed:`, error);\n      throw error;\n    }\n  }\n\n  // Health check method\n  async healthCheck() {\n    try {\n      const response = await this.client.get('/health');\n      console.log('Health check successful:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // =====================================\n  // EXISTING PUJA API METHODS\n  // =====================================\n  async generateFocusSuggestion(data) {\n    return this.post('/puja/focus-suggestion', data);\n  }\n\n  async generateMonthlyPanchang(data) {\n    return this.post('/puja/panchang/monthly', data);\n  }\n\n  async generatePropositions(data) {\n    return this.post('/puja/propositions/generate', data);\n  }\n\n  async generateExperimentalPujas(data) {\n    return this.post('/puja/propositions/experimental', data);\n  }\n\n  async getHistoricalPropositions(params = {}) {\n    return this.get('/puja/propositions/history', { params });\n  }\n\n  async exportToSheets(data) {\n    return this.post('/puja/export/sheets', data);\n  }\n\n  async uploadPDFs(formData) {\n    return this.post('/puja/pdfs/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      timeout: 120000,\n    });\n  }\n\n  async listPDFs() {\n    return this.get('/puja/pdfs/list');\n  }\n\n  async getPujaStatistics(params = {}) {\n    return this.get('/puja/statistics', { params });\n  }\n\n  async getPanchangForDate(date, location = 'delhi') {\n    return this.get('/puja/panchang/date', { \n      params: { date, location } \n    });\n  }\n\n  async saveFocusSuggestion(data) {\n    return this.post('/puja/focus-suggestion/save', data);\n  }\n\n  async getFocusSuggestionHistory(params = {}) {\n    return this.get('/puja/focus-suggestion/history', { params });\n  }\n\n  async getSeasonalEvents(month) {\n    return this.get('/puja/seasonal-events', { \n      params: { month } \n    });\n  }\n\n  // =====================================\n  // NEW PROPOSITION MANAGEMENT METHODS\n  // =====================================\n\n  // Search propositions with advanced filters\n  async searchPropositions(params = {}) {\n    return this.get('/puja/propositions/search', { params });\n  }\n\n  // Get propositions by category\n  async getPropositionsByCategory(category, params = {}) {\n    return this.get(`/puja/propositions/category/${category}`, { params });\n  }\n\n  // Update proposition status\n  async updatePropositionStatus(propositionId, data) {\n    return this.put(`/puja/propositions/${propositionId}/status`, data);\n  }\n\n  // Delete proposition\n  async deleteProposition(propositionId) {\n    return this.delete(`/puja/propositions/${propositionId}`);\n  }\n\n  // Clone proposition\n  async cloneProposition(propositionId, data) {\n    return this.post(`/puja/propositions/${propositionId}/clone`, data);\n  }\n\n  // Generate proposition variations\n  async generatePropositionVariations(propositionId, data) {\n    return this.post(`/puja/propositions/${propositionId}/variations`, data);\n  }\n\n  // Bulk update propositions\n  async bulkUpdatePropositions(data) {\n    return this.post('/puja/propositions/bulk-update', data);\n  }\n\n  // =====================================\n  // ADVANCED ANALYSIS METHODS\n  // =====================================\n\n  // Generate Why-Why Analysis\n  async generateWhyWhyAnalysis(data) {\n    return this.post('/puja/analysis/why-why', data);\n  }\n\n  // Analyze Performance\n  async analyzePerformance(data) {\n    return this.post('/puja/analysis/performance', data);\n  }\n\n  // Competitive Analysis\n  async performCompetitiveAnalysis(data) {\n    return this.post('/puja/analysis/competitive', data);\n  }\n\n  // Seasonal Strategy Optimization\n  async optimizeSeasonalStrategy(data) {\n    return this.post('/puja/analysis/seasonal', data);\n  }\n\n  // =====================================\n  // INNOVATION & EXPERIMENTATION METHODS\n  // =====================================\n\n  // Innovation Workshop\n  async conductInnovationWorkshop(data) {\n    return this.post('/puja/experiments/innovation-workshop', data);\n  }\n\n  // A/B Test Design\n  async designABTest(data) {\n    return this.post('/puja/experiments/ab-test-design', data);\n  }\n\n  // Breakthrough Ideas\n  async generateBreakthroughIdeas(data) {\n    return this.post('/puja/experiments/breakthrough-ideas', data);\n  }\n\n  // Rapid Prototype Design\n  async designRapidPrototype(data) {\n    return this.post('/puja/experiments/rapid-prototype', data);\n  }\n\n  // =====================================\n  // TEAM REVIEW METHODS\n  // =====================================\n\n  // Sync feedback from Google Sheets\n  async syncSheetFeedback(data) {\n    return this.post('/team-review/sync-sheet-feedback', data);\n  }\n\n  // Get review status\n  async getReviewStatus(params = {}) {\n    return this.get('/team-review/status', { params });\n  }\n\n  // Submit review\n  async submitReview(propositionId, data) {\n    return this.post(`/team-review/submit/${propositionId}`, data);\n  }\n\n  // Get pending reviews\n  async getPendingReviews(params = {}) {\n    return this.get('/team-review/pending', { params });\n  }\n\n  // Bulk review\n  async bulkReview(data) {\n    return this.post('/team-review/bulk-review', data);\n  }\n\n  // =====================================\n  // PERFORMANCE TRACKING METHODS\n  // =====================================\n\n  // Track performance metrics\n  async trackPerformance(data) {\n    return this.post('/performance/track', data);\n  }\n\n  // Get performance analytics\n  async getPerformanceAnalytics(params = {}) {\n    return this.get('/performance/analytics', { params });\n  }\n\n  // Get ROI analysis\n  async getROIAnalysis(params = {}) {\n    return this.get('/performance/roi-analysis', { params });\n  }\n\n  // Get top performers\n  async getTopPerformers(params = {}) {\n    return this.get('/performance/top-performers', { params });\n  }\n\n  // Track conversion funnel\n  async trackConversionFunnel(data) {\n    return this.post('/performance/track-conversion', data);\n  }\n\n  // =====================================\n  // LEARNING SYSTEM METHODS\n  // =====================================\n\n  // Analyze patterns\n  async analyzePatterns(params = {}) {\n    return this.get('/learning/analyze-patterns', { params });\n  }\n\n  // Get success factors\n  async getSuccessFactors(params = {}) {\n    return this.get('/learning/success-factors', { params });\n  }\n\n  // Generate recommendations\n  async generateRecommendations(data) {\n    return this.post('/learning/generate-recommendations', data);\n  }\n\n  // Track learning outcome\n  async trackLearningOutcome(data) {\n    return this.post('/learning/track-outcome', data);\n  }\n\n  // =====================================\n  // FEEDBACK METHODS\n  // =====================================\n\n  // Submit feedback\n  async submitFeedback(data) {\n    return this.post('/feedback/submit', data);\n  }\n\n  // Get feedback history\n  async getFeedbackHistory(params = {}) {\n    return this.get('/feedback/history', { params });\n  }\n\n  // Synthesize feedback\n  async synthesizeFeedback(data) {\n    return this.post('/feedback/synthesize', data);\n  }\n\n  // Export feedback to sheets\n  async exportFeedbackToSheets(data) {\n    return this.post('/feedback/export/sheets', data);\n  }\n\n  // =====================================\n  // ANALYTICS & DASHBOARD METHODS\n  // =====================================\n\n  // Get dashboard data\n  async getDashboardData(params = {}) {\n    return this.get('/dashboard/data', { params });\n  }\n\n  // Get weekly overview\n  async getWeeklyOverview(params = {}) {\n    return this.get('/dashboard/weekly', { params });\n  }\n\n  // Get user activity\n  async getUserActivity(params = {}) {\n    return this.get('/dashboard/activity', { params });\n  }\n\n  // Get analytics dashboard\n  async getAnalyticsDashboard(params = {}) {\n    return this.get('/analytics/dashboard', { params });\n  }\n\n  // Get performance analytics\n  async getAnalyticsPerformance(params = {}) {\n    return this.get('/analytics/performance', { params });\n  }\n\n  // Get trends\n  async getAnalyticsTrends(params = {}) {\n    return this.get('/analytics/trends', { params });\n  }\n\n  // Get insights\n  async getAnalyticsInsights(params = {}) {\n    return this.get('/analytics/insights', { params });\n  }\n\n  // =====================================\n  // UTILITY METHODS\n  // =====================================\n\n  // Test connection\n  async testConnection() {\n    try {\n      const response = await this.get('/test');\n      console.log('Connection test successful:', response.data);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  // Generic search method for any endpoint\n  async search(endpoint, params = {}) {\n    return this.get(`${endpoint}/search`, { params });\n  }\n\n  // Generic list method for any endpoint\n  async list(endpoint, params = {}) {\n    return this.get(endpoint, { params });\n  }\n\n  // Generic create method\n  async create(endpoint, data) {\n    return this.post(endpoint, data);\n  }\n\n  // Generic update method\n  async update(endpoint, id, data) {\n    return this.put(`${endpoint}/${id}`, data);\n  }\n\n  // Generic delete method\n  async remove(endpoint, id) {\n    return this.delete(`${endpoint}/${id}`);\n  }\n\n  // Batch operations\n  async batchOperation(endpoint, operation, data) {\n    return this.post(`${endpoint}/${operation}`, data);\n  }\n\n  // File upload helper\n  async uploadFile(endpoint, file, additionalData = {}) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    Object.keys(additionalData).forEach(key => {\n      formData.append(key, additionalData[key]);\n    });\n\n    return this.post(endpoint, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      timeout: 120000,\n    });\n  }\n\n  // Export helper\n  async exportData(endpoint, format = 'json', params = {}) {\n    return this.get(`${endpoint}/export`, {\n      params: { ...params, format },\n      responseType: format === 'csv' ? 'blob' : 'json'\n    });\n  }\n\n  // Pagination helper\n  async getPaginated(endpoint, page = 1, limit = 20, params = {}) {\n    const offset = (page - 1) * limit;\n    return this.get(endpoint, {\n      params: {\n        ...params,\n        limit,\n        offset\n      }\n    });\n  }\n\n  // Error handling helper\n  handleApiError(error, customMessage = null) {\n    const message = customMessage || \n                   error.response?.data?.error || \n                   error.message || \n                   'An unexpected error occurred';\n    \n    toast.error(message);\n    console.error('API Error:', error);\n    \n    return {\n      success: false,\n      error: message,\n      status: error.response?.status,\n      data: null\n    };\n  }\n\n  // Success response helper\n  handleApiSuccess(response, customMessage = null) {\n    if (customMessage) {\n      toast.success(customMessage);\n    }\n    \n    return {\n      success: true,\n      data: response.data,\n      status: response.status,\n      error: null\n    };\n  }\n}\n\n// Create and export the API instance\nexport const api = new ApiService();\n\n// Test connection on startup in development\nif (process.env.NODE_ENV === 'development') {\n  api.testConnection().then(success => {\n    console.log('API Connection Test:', success ? 'SUCCESS' : 'FAILED');\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}